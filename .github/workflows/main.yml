# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "full_cicd" ]
  pull_request:
    branches: [ "full_cicd" ]

  # Allows you to run this workflow manually from the Actions tabe 
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: ubuntu
    name: 'continuous-integration'
    services:
      mysql:
        image: docker://mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      elasticsearch:
        image: docker://elasticsearch:7.1.0
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
          
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        coverage: xdebug
        extensions: mysql,soap
        tools: phpunit:9.5.13
        
      env:
        runner: self-hosted # Specify self-hosted runner.
        
    - name: 'Allow permission to vendor folder.' 
      run: |
          sudo chmod 0777  ./vendor/bin/phpunit
          
    - name: launch magento2 unit test only on vertex tax module
      if: always()
      uses: MAD-I-T/magento-actions@v3.11
      env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
          process: 'unit-test'
          elasticsearch: 1
          unit_test_subset_path: 'vendor/vertexinc/vertex-tax-module/Test/Unit'
          
    - name: launch magento2 unit test only on vertex sdk module
      run: |
          sudo phpunit --version
          sudo php vendor/phpunit/phpunit/phpunit -c dev/tests/unit/phpunit.xml.dist vendor/vertexinc/sdk-module/Test/Unit

    - name: launch magento2 unit test only on vertex request logging module
      run: |
          sudo phpunit --version
          sudo php vendor/phpunit/phpunit/phpunit -c dev/tests/unit/phpunit.xml.dist vendor/vertexinc/*/Test/Unit  --coverage-clover clover.xml 
          
    - name: Code Coverage Check
      uses: sourcetoad/phpunit-coverage-action@v1
      with:
        clover_report_path: clover.xml
    
    - name: fix code coverage paths
      working-directory: ./coverage
      run: |
         sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' clover.xml
    
    # SonarQube Scanner Github Action
    - name: SonarQube Scanner
      uses: sonarsource/sonarqube-scan-action@master
      with:
        # Args can be configured through Args section below or by sonar-project.properties in your projectBaseDir
        args: >
          -Dsonar.projectKey=connector-orocommerce
          -Dsonar.projectName=connector-orocommerce
          -Dsonar.sources=src/Vertex/OSeriesBundle -Dsonar.php.coverage.reportPaths=coverage/clover.xml -Dsonar.php.tests.reportPath=coverage/report.junit.xml
          -Dsonar.coverage.exclusions=src\Vertex\OSeriesBundle\Migrations\**,src\Vertex\OSeriesBundle\Resources\**,src\Vertex\OSeriesBundle\Command\**,src\Vertex\OSeriesBundle\Controller\Api\Rest\**
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}